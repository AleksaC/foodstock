type Mutation {
    createProduct(input: createProductInput!): Product
    updateProduct(input: updateProductInput!): Product
    deleteProduct(input: deleteProductInput!): Product
}
# TODO:

# Consider adding a `!` in, for example, nutritionalValuesInput, 
# descriptionInput, and in the updateProductInput itself
# I think it's better, just as a layer of security, because if some 
# attribute is not sent, ESPECIALLY the object attributes (price, description,
# nutriValues), then the product in the database will be malformed

# Maybe while testing, leave that some fields can be null, but later on,
# perhaps change everything to be non-null (?)

# Maybe also make all the queries and mutations for products return Product! instead of Product

# Make the barcode (and categories?) a list down the line

type Product {
    id: ID!
    briefDescription: String!
    category: String!
    currentPrice: currentPrice!
    description: description!
    name: String!
    nutriScore: String!
    nutritionalValues: nutritionalValues!
    status: String!
    images: [String]!
    store: String!
    storeID: String!
    productStoreID: String!
    barcode: String!
}

type Query {
    getAllProducts: [Product!]
    getProduct(id: ID!): Product
    search(
        query: String!
        # didn't add search modes
        limit: Int!  # how many records per page
        nextToken: String  # a token used for pagination
    ): SearchResultsPage!
}

type SearchResultsPage {
    results: [Product!]
    nextToken: String  # for pagination
}

input createProductInput {
    briefDescription: String!
    category: String!
    name: String!
    nutriScore: String!
    status: String!
    # images: ???
    currentPrice: currentPriceInput!
    description: descriptionInput!
    nutritionalValues: nutritionalValuesInput!
    barcode: String!
}

type currentPrice {
    date: String!
    discountAmount: String!
    discountStartDate: String!
    discountEndDate: String!
    discountPrice: String!
    regularPrice: String!
}

input currentPriceInput {
    date: String!  # is it necessary?
    discountAmount: String!
    discountStartDate: String!
    discountEndDate: String!
    discountPrice: String!
    regularPrice: String!
}

input deleteProductInput {
    id: ID!
}

type description {
    allergens: String!
    alcohol: String!
    additionalInformation: String!
    producer: String!
    expiryDate: String!
    ingredients: String!
    imports: String!
    countryOfOrigin: String!
    maintenance: String!
}

input descriptionInput {
    allergens: String!
    alcohol: String!
    additionalInformation: String!
    producer: String!
    expiryDate: String!
    ingredients: String!
    imports: String!
    countryOfOrigin: String!
    maintenance: String!
}

type nutritionalValues {
    carbs: Float!
    energy: String!
    fats: Float!
    proteins: Float!
    salt: Float!
    saturatedFats: Float!
    sugar: Float!
    fibers: Float!
}

input nutritionalValuesInput {
    carbs: Float!
    energy: String!
    fats: Float!
    proteins: Float!
    salt: Float!
    saturatedFats: Float!
    sugar: Float!
    fibers: Float!
}

schema {
    query: Query
    mutation: Mutation
}

input updateProductInput {
    id: ID!
    briefDescription: String
    category: String
    name: String
    nutriScore: String
    status: String
    currentPrice: currentPriceInput
    description: descriptionInput
    nutritionalValues: nutritionalValuesInput
    # Don't think I need these below, maybe only the barcode
    # images: WhatToDoWithThis
    #? store: String
    #? storeID: String
    #? productStoreID: Don'tThinkINeedThis
    barcode: String
}
