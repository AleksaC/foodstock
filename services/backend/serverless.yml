service: openup-backend

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-iam-roles-per-function

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Name of the SST app that's deploying our infrastructure
  sstApp: ${self:custom.stage}-infrastructure

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-central-1
  environment:
    tableName: !ImportValue '${self:custom.sstApp}-TableName'
    usersTableName: !ImportValue '${self:custom.sstApp}-usersTableName'
    stage: ${self:custom.stage}

functions:
  # Added the basic DynamoDB functionality
  # Insert not available yet, until a stable solution is created
  # insert:
  #   handler: functions/insert-product.main
  #   iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:PutItem
  #     Resource:
  #       - !ImportValue '${self:custom.sstApp}-TableArn'

  update:
    handler: functions/update-product.main
    events:
      - http:
          path: product/{id}
          method: put
          authorizer: aws_iam
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource:
        - !ImportValue '${self:custom.sstApp}-TableArn'

  delete:
    handler: functions/delete-product.main
    events:
      - http:
          path: product/{id}
          method: delete
          authorizer: aws_iam
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
      Resource:
        - !ImportValue '${self:custom.sstApp}-TableArn'

  get:
    handler: functions/get-product.main
    events:
      - http:
          path: products/{id}
          method: get
          authorizer: aws_iam
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource:
        - !ImportValue '${self:custom.sstApp}-TableArn'

  syncProductsToAlgolia:
    handler: functions/sync-products-to-algolia.handler
    events:
      - http:
          authorizer: aws_iam
      - stream:
          type: dynamodb
          arn: !ImportValue '${self:custom.sstApp}-StreamArn'
          batchSize: 100
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - ssm:GetParameters
          - ssm:GetParametersByPath
          - ssm:GetParameter
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/foodstock/${self:custom.stage}/algoliaAppID
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/foodstock/${self:custom.stage}/algoliaAdminKey