service: openup-backend

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Name of the SST app that's deploying our infrastructure
  sstApp: ${self:custom.stage}-infrastructure


provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-central-1
  environment:
    tableName: !ImportValue '${self:custom.sstApp}-TableName'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource:
        - !ImportValue '${self:custom.sstApp}-TableArn'

functions:
  # hello:
  #   handler: functions/handler.hello
  #   events:
  #     - http:
  #         path: hello
  #         method: get
  # Added the basic DynamoDB functionality
  # Insert not available yet, until a stable solution is created
  update:
    handler: functions/update-product.main
  delete:
    handler: functions/delete-product.main
  get:
    handler: functions/get-product.main
  # syncProductsToAlgolia:
  #   handler: functions/sync-products-to-algolia.handler
  #   events:
  #     - stream:
  #         type: dynamodb
  #         arn: !GetAtt TableName.StreamArn  # doesn't exist
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action: ssm:GetParameters
  #       Resource:
  #         # the stage is not dynamic
  #         - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/foodstock/dev/algoliaAppID
  #         - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/foodstock/dev/algoliaAdminAPIKey
