service: openup-backend
configValidationMode: error

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-appsync-plugin

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Name of the SST app that's deploying our infrastructure
  sstApp: ${self:custom.stage}-infrastructure
  appSync: ${file(serverless.appsync-api.yml)}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-central-1
  environment:
    productsTableName: !ImportValue '${self:custom.sstApp}-ProductsTableName'
    usersTableName: !ImportValue '${self:custom.sstApp}-UsersTableName'
    stage: ${self:custom.stage}

functions:
  insert:
    handler: functions/insert-product.main
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource:
        - !ImportValue '${self:custom.sstApp}-ProductsTableArn'

  update:
    handler: functions/update-product.main
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource:
        - !ImportValue '${self:custom.sstApp}-ProductsTableArn'

  delete:
    handler: functions/delete-product.main
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem  # because we're only changing the status, not actually deleting
      Resource:
        - !ImportValue '${self:custom.sstApp}-ProductsTableArn'

  get:
    handler: functions/get-product.main
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource:
        - !ImportValue '${self:custom.sstApp}-ProductsTableArn'

  list:
    handler: functions/list-all-products.main
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource:
          - !ImportValue '${self:custom.sstApp}-ProductsTableArn'

  syncProductsToAlgolia:
    handler: functions/sync-products-to-algolia.handler
    events:
      - stream:
          type: dynamodb
          arn: !ImportValue '${self:custom.sstApp}-ProductsStreamArn'
          batchSize: 100
          startingPosition: LATEST
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - ssm:GetParameters
          - ssm:GetParametersByPath
          - ssm:GetParameter
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/foodstock/${self:custom.stage}/algoliaAppID
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/foodstock/${self:custom.stage}/algoliaAdminKey

  search:
    handler: functions/search.handler
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - ssm:GetParameters
          - ssm:GetParametersByPath
          - ssm:GetParameter
        Resource:
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/foodstock/${self:custom.stage}/algoliaAppID
          - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/foodstock/${self:custom.stage}/algoliaAdminKey

  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource: !ImportValue '${self:custom.sstApp}-UsersTableArn'

  productHistoryChange:
    handler: functions/product-history-change.handler
    events:
      - stream:
          type: dynamodb
          arn: !ImportValue '${self:custom.sstApp}-ProductsStreamArn'
          batchSize: 100
          startingPosition: LATEST
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:eu-central-1:233257714052:table/ProductHistory
    
resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: false
            RequireNumbers: false
            RequireUppercase: false
            RequireSymbols: false
        UsernameAttributes:
          - email
        Schema:
          - AttributeDataType: String
            Name: name
            Required: false
            Mutable: true
        LambdaConfig:
          PostConfirmation: !GetAtt ConfirmUserSignupLambdaFunction.Arn

    UserPoolInvokeConfirmUserSignupLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:invokeFunction
        FunctionName: !Ref ConfirmUserSignupLambdaFunction
        Principal: cognito-idp.amazonaws.com
        SourceArn: !GetAtt CognitoUserPool.Arn

    WebUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref CognitoUserPool
        ClientName: web
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED